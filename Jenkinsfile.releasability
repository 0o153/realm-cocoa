def doBuild() {
  stage('prepare') {
    //  build job: 'objc_prepare_workspace', parameters: [string(name: 'sha', value: sha)]
    node('docker') {
      checkout(
        [
          $class           : 'GitSCM',
          branches         : scm.branches,
          gitTool          : 'native git',
          extensions       : scm.extensions + [[$class: 'CleanCheckout'],
                                               [$class: 'SubmoduleOption', parentCredentials: true]],
          userRemoteConfigs: scm.userRemoteConfigs,
        ]
      )

      stash includes: '**', name: 'source'
    }
  }

  stage('build') {
    parallel (
      objcOsx: { build job: 'objc_osx' },
      cocoaDocs: { build job: 'cocoa_docs' },
      objcIos: { build job: 'objc_ios' },
      objcWatchos: { build job: 'objc_watchos' },
      objcTvos: { build job: 'objc_tvos' },
      cocoaIosDyn: { build job: 'cocoa_ios_dynamic' },
      objcExamples: { build job: 'objc_examples' },
      packageIosSwift: { build job: 'Package iOS Swift' },
      packageOsxSwift: { build job: 'Package OS X Swift' },
      packageWatchosSwift: { build job: 'Package watchOS Swift' },
      packageTvosSwift: { build job: 'Package tvOS Swift' }
    )
  }

  stage('package') {
    parallel (
      objc: { build job: 'cocoa_release_package' },
      swift: { build job: 'swift_release_package' }
    )
  }

  stage('test') {
    parallel (
      objcTestExamples: { build job: 'objc_test_examples', parameters: [string(name: 'sha', value: sha)] },
      cocoaInstallationExamples: { build job: 'Cocoa Installation Examples', parameters: [string(name: 'sha', value: sha)] }
    )
  }
}

try {
  doBuild()
} catch (e) {
  // If there was an exception thrown, the build failed
  currentBuild.result = "FAILED"
  throw e
} finally {
  // Success or failure, always send notifications
  notifyBuild(currentBuild.result, '#cocoa-team')
}

def notifyBuild(String buildStatus = 'STARTED', String channel) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // FIXME: Enable this once things are mostly working.
  // slackSend(channel: channel, color: colorCode, message: summary)
}
