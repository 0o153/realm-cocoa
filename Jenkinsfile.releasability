swiftVersions = ['3.0', '3.0.1', '3.0.2', '3.1', '3.2', '4.0']
platforms = ['osx', 'ios', 'watchos', 'tvos']
platformNames = ['osx': 'macOS', 'ios': 'iOS', 'watchos': 'watchOS', 'tvos': 'tvOS']

def doBuild() {
  stage('prepare') {
    node('docker') {
      checkout(
        [
          $class           : 'GitSCM',
          branches         : scm.branches,
          gitTool          : 'native git',
          extensions       : scm.extensions + [[$class: 'CleanCheckout'],
                                               [$class: 'SubmoduleOption', parentCredentials: true]],
          userRemoteConfigs: scm.userRemoteConfigs,
        ]
      )

      stash includes: '**', name: 'source'
    }
  }

  stage('build') {
    def parallelBuilds = [
      "docs": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh '''
          ./scripts/reset-simulators.sh
          ./build.sh docs
          cd docs
          zip -r objc-docs.zip objc_output
          zip -r swift-docs.zip swift_output
          '''
          stash includes: 'docs/*-docs.zip', name: 'docs'
        }
      },

      "examples": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-examples'
          stash includes: 'realm-examples.zip', name: 'examples'
        }
      },

      "macOS Obj-C": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-osx'
          // FIXME: Why is this file at a different location than for the other variants?
          dir('build/DerivedData/Realm/Build/Products/Release') {
            stash includes: 'realm-framework-osx.zip', name: 'osx-objc'
          }
        }
      },
      "iOS Obj-C": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-ios-dynamic'
          dir('build/ios') {
            stash includes: 'realm-framework-ios.zip', name: 'ios-objc'
          }
        }
      },
      "watchOS Obj-C": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-watchos'
          dir('build/watchos') {
            stash includes: 'realm-framework-watchos.zip', name: 'watchos-objc'
          }
        }
      },
      "tvOS Obj-C": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-tvos'
          dir('build/tvos') {
            stash includes: 'realm-framework-tvos.zip', name: 'tvos-objc'
          }
        }
      },
      "iOS Obj-C static": {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'XCMODE=xcpretty ./build.sh package-ios-static'
          dir('build/ios-static') {
            stash includes: 'realm-framework-ios-static.zip', name: 'ios-objc-static'
          }
        }
      },
    ]

    for (def p in platforms) {
      def platform = p
      def platformName = platformNames[platform]
      for (def v in swiftVersions) {
        def swiftVersion = v
        parallelBuilds["${platformName} Swift ${swiftVersion}"] = {
          node('osx') {
            deleteDir()
            unstash 'source'
            sh "XCMODE=xcpretty ./build.sh package-${platform}-swift-${swiftVersion}"
            dir("build/${platform}") {
              stash includes: "realm-swift-framework-${platform}-swift-${swiftVersion}.zip",
                    name: "${platform}-swift-${swiftVersion}"
            }
          }
        }
      }
    }

    parallel parallelBuilds
  }

  stage('package') {
    parallel (
      "Obj-C": {
        node('osx') {
          deleteDir()

          for (def platform in platforms) {
            unstash "${platform}-objc"
          }

          unstash 'ios-objc-static'
          unstash 'examples'
          unstash 'source'

          sh './build.sh package-release objc'
          stash include: 'realm-objc-*.zip', name: 'objc-packaged'
          archiveArtifacts artifacts: 'realm-objc-*.zip'
        }
      },
      "Swift": {
        node('osx') {
          deleteDir()

          for (def platform in platforms) {
            for (def swiftVersion in swiftVersions) {
              unstash "${platform}-swift-${swiftVersion}"
            }
          }

          unstash 'examples'
          unstash 'source'

          sh './build.sh package-release swift'
          sh 'rm realm-swift-framework-*.zip'
          stash include: 'realm-swift-*.zip', name: 'swift-packaged'
          archiveArtifacts artifacts: 'realm-swift-*.zip'
        }
      }
    )
  }

  stage('test') {
    parallel (
      "Test Examples": {
        node('osx') {
          deleteDir()

          // FIXME: Split Obj-C and Swift.
          unstash 'objc-packaged'
          unstash 'swift-packaged'

          def sha = params.sha
          sh """
          curl -O https://raw.githubusercontent.com/realm/realm-cocoa/${sha}/build.sh
          mkdir -p scripts
          curl https://raw.githubusercontent.com/realm/realm-cocoa/${sha}/scripts/swift-version.sh -o scripts/swift-version.sh
          curl https://raw.githubusercontent.com/realm/realm-cocoa/${sha}/scripts/reset-simulators.sh -o scripts/reset-simulators.sh
          curl https://raw.githubusercontent.com/realm/realm-cocoa/${sha}/scripts/reset-simulators.rb -o scripts/reset-simulators.rb
          chmod +x scripts/reset-simulators.rb

          XCMODE=xcpretty sh build.sh package-test-examples
          """
        }
      },

      "Installation Examples": {
        // FIXME: Implement this.
        // build job: 'Cocoa Installation Examples', parameters: [string(name: 'sha', value: sha)]
      }
    )
  }
}

try {
  doBuild()
} catch (e) {
  // If there was an exception thrown, the build failed
  currentBuild.result = "FAILED"
  throw e
} finally {
  // Success or failure, always send notifications
  notifyBuild(currentBuild.result, '#cocoa-team')
}

def notifyBuild(String buildStatus = 'STARTED', String channel) {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // FIXME: Enable this once things are mostly working.
  // slackSend(channel: channel, color: colorCode, message: summary)
}
